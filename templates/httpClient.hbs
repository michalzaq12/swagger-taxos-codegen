
export interface IApiRequestConfig {
url: string
method: string
headers?: {
[key: string]: string
}
params?: {
[key: string]: string
}
data?: object | FormData
signal?: AbortSignal
// Pass custom vars to request or error handler (not used by fetch)
custom?: {
[key: string]: string | boolean | number
},
opSecurity: Array<string>
    }


    function fetchV2(config: IApiRequestConfig) {
    const url = new URL(config.url);
    if (config.params) {
    for (const [key, value] of Object.entries(config.params)) {
    // Skip invalid query params
    if (value !== undefined && value !== '' && value !== null) url.searchParams.set(key, value);
    }
    }

    const myHeaders = new Headers();
    if (config.headers) {
    for (const [key, value] of Object.entries(config.headers)) {
    myHeaders.append(key, value)
    }
    }

    let data: undefined | string | FormData = undefined
    if (config.method.toLowerCase() !== 'get') {
    if (config.data && config.data instanceof FormData) {
    // Form Data
    myHeaders.append('Content-Type', 'multipart/form-data')
    data = config.data
    } else if (config.data && Object.keys(config.data).length > 0) {
    // Object (but not empty)
    myHeaders.append('Content-Type', 'application/json')
    data = JSON.stringify(config.data)
    }
    }

    return fetch(url, {
    method: config.method,
    headers: myHeaders,
    signal: config.signal,
    body: data,
    cache: 'no-store'
    })
    }

    // NOTE: In future replace with AbortSignal.any (Chrome 116+, no Safari)
    function anySignal(signals: AbortSignal[]): AbortSignal | undefined {
    if (signals.length === 0) return undefined;
    const controller = new AbortController();

    for (const signal of signals) {
    if (signal.aborted) {
    controller.abort();
    return signal;
    }

    signal.addEventListener('abort', () => controller.abort(signal.reason), {
    signal: controller.signal,
    });
    }

    return controller.signal;
    }

    function getTimeoutSignal (timeout: number) {
    // Use native fetch timeout when available (Chrome 103+)
    if (typeof AbortSignal.timeout === 'function') return {timeoutSignal: AbortSignal.timeout(timeout)};
    else {
    const timeoutController = new AbortController();
    const timeoutError = new Error(`Timeout of ${timeout}ms exceeded`)
    timeoutError.name = 'TimeoutError'
    return {
    timeoutSignal: timeoutController.signal,
    timeoutId: setTimeout(() => timeoutController.abort(timeoutError), timeout)
    }
    }
    }

    export interface IHttpClientOptions {
    baseURL: string
    timeout: number
    beforeRequest?: (config: IApiRequestConfig) => Promise<IApiRequestConfig>
    afterNotOkResponse: (res: Response | Error, config: IApiRequestConfig) => Promise<Error>
    wrapRequest? <T> (request: () => Promise<T>) : Promise<T>
    }

    function createHttpClient(options: IHttpClientOptions) {
    return {
    async request(config: IApiRequestConfig) {
    const wrapper = options.wrapRequest || (request => request())
    return wrapper(async () => {
    config.url = options.baseURL + config.url;
    const newConfig = options.beforeRequest ? await options.beforeRequest(config) : config;
    const {timeoutSignal, timeoutId} = getTimeoutSignal(options.timeout)
    config.signal = config.signal ? anySignal([config.signal, timeoutSignal]) : timeoutSignal;
    try {
    const res = await fetchV2(newConfig);
    if (timeoutId) clearTimeout(timeoutId);
    if (!res.ok) return Promise.reject(await options.afterNotOkResponse(res, newConfig));
    const resContentLength = res.headers.get('Content-Length');
    const resContentType = res.headers.get('Content-Type');
    // 'Content-Length' is not always exposed (e.g. when 'Transfer-Encoding': 'chunked')
    if (resContentLength && resContentLength === '0') return undefined;
    else if (resContentType && resContentType.includes('application/json')) return await res.json();
    else return await res.text();
    } catch (err: any) {
    if (timeoutId) clearTimeout(timeoutId);
    throw await options.afterNotOkResponse(err, newConfig);
    }
    })
    },
    };
    }
