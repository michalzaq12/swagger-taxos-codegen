async ${{> methodSignature}}{

    {{#equalsLength parameters 1}}
        let path = `{{pathTemplate}}`;
    {{else}}
        let path = `{{pathTemplateForParameters}}`;
    {{/equalsLength}}
    let queryParams : any = {};
    let data : any = {};

    {{^isEmpty parameters}}
        {{#equalsLength parameters 1}}
            {{#with parameters.[0]}}
                {{> parameter key=camelCaseName}}
            {{/with}}
        {{else}}

        {{#if hasAllOptionalParameters}}if(parameters !== undefined){ {{/if}}
            {{#each parameters~}}
                {{> parameter key=(concat 'parameters["' camelCaseName '"]') hasMultipleBodyParameters=../hasMultipleBodyParameters}}
            {{~/each}}
        {{#if hasAllOptionalParameters}} } {{/if}}
        {{/equalsLength}}
    {{/isEmpty}}

    try {
        return await httpClient.request({
        url: path,
        method: '{{method}}',
        params: queryParams,
        data: data,
        ...config
        })
    } catch (e) {
        // Re-throw for proper stack trace (otherwise the stack trace always points to "afterNotOkResponse")
        throw e
    }

},